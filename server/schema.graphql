# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum Category {
  Centrality
  Clustering
  Correlation
  Dissimilarity
  ExternalTools
  FileConverters
  Miscellaneous
  StatsVisualizations
  TimeSeries
  Transformations
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumCategoryFieldUpdateOperationsInput {
  set: Category
}

input EnumCategoryFilter {
  equals: Category
  in: [Category!]
  not: NestedEnumCategoryFilter
  notIn: [Category!]
}

input EnumLanguageFieldUpdateOperationsInput {
  set: Language
}

input EnumLanguageFilter {
  equals: Language
  in: [Language!]
  not: NestedEnumLanguageFilter
  notIn: [Language!]
}

input EnumPipelineStatusFieldUpdateOperationsInput {
  set: PipelineStatus
}

enum Language {
  CUDA
  CXX
  Perl
  Python
  R
}

type Mutation {
  createPipeline(pipelineData: PipelineCreateInput!): Pipeline!
  createPlugin(pluginData: PluginCreateInput!): Plugin!
  updatePipeline(pipelineData: PipelineUpdateInput!, where: PipelineWhereUniqueInput!): Pipeline!
  updatePlugin(pluginData: PluginUpdateInput!, where: PluginWhereUniqueInput!): Plugin!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumCategoryFilter {
  equals: Category
  in: [Category!]
  not: NestedEnumCategoryFilter
  notIn: [Category!]
}

input NestedEnumLanguageFilter {
  equals: Language
  in: [Language!]
  not: NestedEnumLanguageFilter
  notIn: [Language!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type Pipeline {
  createdAt: DateTime!
  description: String!
  githubUrl: String!
  id: ID!
  name: String!
  status: PipelineStatus!
  updatedAt: DateTime!
}

type PipelineCountAggregate {
  _all: Int!
  createdAt: Int!
  description: Int!
  githubUrl: Int!
  id: Int!
  name: Int!
  status: Int!
  updatedAt: Int!
}

input PipelineCreateInput {
  createdAt: DateTime
  description: String!
  githubUrl: String!
  id: String
  name: String!
  status: PipelineStatus
  updatedAt: DateTime
}

type PipelineMaxAggregate {
  createdAt: DateTime
  description: String
  githubUrl: String
  id: String
  name: String
  status: PipelineStatus
  updatedAt: DateTime
}

type PipelineMinAggregate {
  createdAt: DateTime
  description: String
  githubUrl: String
  id: String
  name: String
  status: PipelineStatus
  updatedAt: DateTime
}

enum PipelineStatus {
  Completed
  Future
  InProgress
}

input PipelineUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  githubUrl: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  status: EnumPipelineStatusFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PipelineWhereUniqueInput {
  id: String
  name: String
}

type Plugin {
  category: Category!
  createdAt: DateTime!
  description: String!
  githubUrl: String!
  id: ID!
  language: Language!
  name: String!
  updatedAt: DateTime!
}

type PluginCountAggregate {
  _all: Int!
  category: Int!
  createdAt: Int!
  description: Int!
  githubUrl: Int!
  id: Int!
  language: Int!
  name: Int!
  updatedAt: Int!
}

input PluginCreateInput {
  category: Category!
  createdAt: DateTime
  description: String!
  githubUrl: String!
  id: String
  language: Language!
  name: String!
  updatedAt: DateTime
}

type PluginMaxAggregate {
  category: Category
  createdAt: DateTime
  description: String
  githubUrl: String
  id: String
  language: Language
  name: String
  updatedAt: DateTime
}

type PluginMinAggregate {
  category: Category
  createdAt: DateTime
  description: String
  githubUrl: String
  id: String
  language: Language
  name: String
  updatedAt: DateTime
}

input PluginOrderByInput {
  category: SortOrder
  createdAt: SortOrder
  description: SortOrder
  githubUrl: SortOrder
  id: SortOrder
  language: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input PluginUpdateInput {
  category: EnumCategoryFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  githubUrl: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  language: EnumLanguageFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PluginWhereInput {
  AND: [PluginWhereInput!]
  NOT: [PluginWhereInput!]
  OR: [PluginWhereInput!]
  category: EnumCategoryFilter
  createdAt: DateTimeFilter
  description: StringFilter
  githubUrl: StringFilter
  id: StringFilter
  language: EnumLanguageFilter
  name: StringFilter
  updatedAt: DateTimeFilter
}

input PluginWhereUniqueInput {
  githubUrl: String
  id: String
  name: String
}

type Query {
  pipelines: [Pipeline!]!
  plugin(where: PluginWhereUniqueInput!): Plugin
  plugins(orderBy: PluginOrderByInput, skip: Int, take: Int, where: PluginWhereInput): [Plugin!]
  user(id: String!): User
}

enum QueryMode {
  default
  insensitive
}

enum Role {
  Admin
  User
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  role: Role!
  updatedAt: DateTime!
}
