datasource db {
  provider             = "mongodb"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  binaryTargets   = ["native", "linux-musl"]
}

generator nestgraphql {
  provider               = "node node_modules/prisma-nestjs-graphql"
  output                 = "../server/@generated/prisma-graphql"
  reExport               = Directories
  purgeOutput            = true
  fields_Validator_from  = "class-validator"
  fields_Validator_input = true
}

enum PluginStatus {
  Verified
  Unverified
  Passing
  Failing
}

model Plugin {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String       @unique
  category     Category     @relation(fields: [categoryId], references: [id])
  categoryId   String       @db.ObjectId
  description  String
  githubUrl    String       @unique
  language     Language     @relation(fields: [languageId], references: [id])
  languageId   String       @db.ObjectId
  rating       Int          @default(0)
  author       User?        @relation(fields: [authorId], references: [id])
  authorId     String?      @db.ObjectId
  verification PluginStatus @default(Unverified)
  comments     Comment[]
  tags         String[]
  createdAt    DateTime     @default(now()) @db.Timestamp
  updatedAt    DateTime     @default(now()) @updatedAt @db.Timestamp

  @@map("plugins")
}

model Category {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  plugins Plugin[]

  @@map("categories")
}

model Language {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  name    String   @unique
  plugins Plugin[]

  @@map("languages")
}

enum Role {
  Admin
  User
  Guest
}

model User {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  email        String        @unique
  /// @HideField()
  passwordHash String
  displayName  String?       @unique
  website      String?
  institution  String?
  avatar       String?
  role         Role          @default(User)
  plugins      Plugin[]
  pipelines    Pipeline[]
  comments     Comment[]
  /// @HideField()
  registration Registration?
  enabled      Boolean       @default(false)
  createdAt    DateTime      @default(now()) @db.Timestamp
  updatedAt    DateTime      @default(now()) @updatedAt @db.Timestamp

  @@map("users")
  PasswordResetCode PasswordResetCode[]
}

model Registration {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
  /// HideField()
  code   String @unique
}

enum PipelineStatus {
  Completed
  InProgress
  Future
}

model Pipeline {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String         @unique
  description String
  githubUrl   String         @unique
  status      PipelineStatus @default(Completed)
  rating      Int            @default(0)
  createdAt   DateTime       @default(now()) @db.Timestamp
  updatedAt   DateTime       @default(now()) @updatedAt @db.Timestamp
  User        User?          @relation(fields: [userId], references: [id])
  userId      String?        @db.ObjectId

  @@map("pipelines")
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  content   String
  parent    Comment?  @relation(name: "subcomments", fields: [parentId], references: [id], onUpdate: NoAction)
  parentId  String    @db.ObjectId
  children  Comment[] @relation(name: "subcomments")
  plugin    Plugin    @relation(fields: [pluginId], references: [id])
  pluginId  String    @db.ObjectId
  createdAt DateTime  @default(now()) @db.Timestamp
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp

  @@map("comments")
}

model Publication {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  authors       String
  publishedYear Int
  title         String
  journal       String
  journalVolume Int
  journalIssue  Int
  pageRange     String
  url           String?
  doi           String?
  isNew         Boolean

  @@map("publications")
}

model PasswordResetCode {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  token   String @unique
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId

  @@map("passwordResetCode")
}
